/* * Conditions Of Use  *  * This software was developed by employees of the National Institute of * Standards and Technology (NIST), an agency of the Federal Government. * Pursuant to title 15 Untied States Code Section 105, works of NIST * employees are not subject to copyright protection in the United States * and are considered to be in the public domain.  As a result, a formal * license is not needed to use the software. *  * This software is provided by NIST as a service and is expressly * provided "AS IS."  NIST MAKES NO WARRANTY OF ANY KIND, EXPRESS, IMPLIED * OR STATUTORY, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTY OF * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT * AND DATA ACCURACY.  NIST does not warrant or make any representations * regarding the use of the software or the results thereof, including but * not limited to the correctness, accuracy, reliability or usefulness of * the software. *  * Permission to use this software is contingent upon your acceptance * of the terms of this agreement. *  */package org.siprop.pip.message.parser;import java.text.ParseException;import java.util.Iterator;import org.siprop.pip.message.address.Address;import org.siprop.pip.message.address.PipUri;import org.siprop.pip.message.address.URI;import org.siprop.pip.message.header.ContactHeader;import org.siprop.pip.message.header.ContactList;import org.siprop.pip.message.header.PIPHeader;/** * A parser for The PIP contact header. *  * @version 1.2 $Revision: 1.9 $ $Date: 2006/07/13 09:02:23 $ * @since 1.1 */public class ContactParser extends AddressParametersParser {	public ContactParser(String contact) {		super(contact);	}	protected ContactParser(Lexer lexer) {		super(lexer);		this.lexer = lexer;	}	public PIPHeader parse() throws ParseException {		// past the header name and the colon.		headerName(TokenTypes.CONTACT);		ContactList retval = new ContactList();		while (true) {			ContactHeader contact = new ContactHeader();			if (lexer.lookAhead(0) == '*') {				final char next = lexer.lookAhead(1);				if (next == ' ' || next == '\t' || next == '\r' || next == '\n') {					this.lexer.match('*');					contact.setWildCardFlag(true);				} else {					super.parse(contact);				}			} else {				super.parse(contact);			}			Address address = (Address) contact.getAddress();			URI uri = contact.getAddress().getURI();			/*			 * When the header field value contains a display name, the URIold			 * including all URIold parameters is enclosed in "<" and ">". If no "<"			 * and ">" are present, all parameters after the URIold are header			 * parameters, not URIold parameters.			 */			if (address.getAddressType() == Address.ADDRESS_SPEC					&& uri instanceof PipUri) {				PipUri	 pipUri = (PipUri) uri;				for (Iterator it = pipUri.getParameterNames(); it.hasNext();) {					String name = (String) it.next();					String val = pipUri.getParameter(name);					pipUri.removeParameter(name);					contact.setParameter(name,val);				}			}			retval.add(contact);			this.lexer.SPorHT();			if (lexer.lookAhead(0) == ',') {				this.lexer.match(',');				this.lexer.SPorHT();			} else if (lexer.lookAhead(0) == '\n' || lexer.lookAhead(0) == '\0')				break;			else				throw createParseException("unexpected char");		}		return retval;	}}