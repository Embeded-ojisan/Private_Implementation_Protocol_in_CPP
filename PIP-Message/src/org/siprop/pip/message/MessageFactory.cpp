/** Conditions Of Use * * This software was developed by employees of the National Institute of* Standards and Technology (NIST), an agency of the Federal Government.* Pursuant to title 15 Untied States Code Section 105, works of NIST* employees are not subject to copyright protection in the United States* and are considered to be in the public domain.  As a result, a formal* license is not needed to use the software.* * This software is provided by NIST as a service and is expressly* provided "AS IS."  NIST MAKES NO WARRANTY OF ANY KIND, EXPRESS, IMPLIED* OR STATUTORY, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTY OF* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT* AND DATA ACCURACY.  NIST does not warrant or make any representations* regarding the use of the software or the results thereof, including but* not limited to the correctness, accuracy, reliability or usefulness of* the software.* * Permission to use this software is contingent upon your acceptance* of the terms of this agreement*  * .* *//******************************************************************************** Product of NIST/ITL Advanced Networking Technologies Division (ANTD).        ********************************************************************************/package org.siprop.pip.message;import java.text.ParseException;import org.siprop.pip.message.address.URI;import org.siprop.pip.message.header.CSeqHeader;import org.siprop.pip.message.header.CallIdHeader;import org.siprop.pip.message.header.ContentTypeHeader;import org.siprop.pip.message.header.FromHeader;import org.siprop.pip.message.header.StatusLine;import org.siprop.pip.message.header.ToHeader;import org.siprop.pip.message.parser.StringMsgParser;/** *  Message Factory implementation  * * @version 1.2 $Revision: 1.7 $ $Date: 2006/07/18 10:45:00 $ * @since 1.1 * * @author M. Ranganathan   <br/> * @author Olivier Deruelle <br/> *  */public class MessageFactory {	/**	 * Creates a new instance of MessageFactory	 */	public MessageFactory() {	}	/**	 * Creates a new Request message of type specified by the method paramater,	 * containing the URIold of the Request, the mandatory headers of the message	 * with a body in the form of a Java object and the body content type.	 *	 * @param requestURI - the new URIold object of the requestURI value of this Message.	 * @param method - the new string of the method value of this Message.	 * @param callId - the new CallIdHeader object of the callId value of this Message.	 * @param cSeq - the new CSeqHeader object of the cSeq value of this Message.	 * @param from - the new FromHeader object of the from value of this Message.	 * @param to - the new ToHeader object of the to value of this Message.	 * @param content - the new Object of the body content value of this Message.	 * @param contentType - the new ContentTypeHeader object of the content type 	 * value of this Message.	 * @throws ParseException which signals that an error has been reached	 * unexpectedly while parsing the method or the body.	 */	public PIPRequest createRequest(		URI requestURI,		String method,		CallIdHeader callId,		CSeqHeader cSeq,		FromHeader from,		ToHeader to,		ContentTypeHeader contentType,		Object content)		throws ParseException {		if (requestURI == null			|| method == null			|| callId == null			|| cSeq == null			|| from == null			|| to == null			|| content == null			|| contentType == null)			throw new NullPointerException("Null parameters");		PIPRequest pipRequest = new PIPRequest();		pipRequest.setRequestURI(requestURI);		pipRequest.setMethod(method);		pipRequest.setCallId(callId);		pipRequest.setCSeq(cSeq);		pipRequest.setFrom(from);		pipRequest.setTo(to);		pipRequest.setContent(content, contentType);		return pipRequest;	}	/**	 * Creates a new Request message of type specified by the method paramater,	 * containing the URIold of the Request, the mandatory headers of the message	 * with a body in the form of a byte array and body content type.	 *	 * @param requestURI - the new URIold object of the 	 * requestURI value of this Message.	 * @param method - the new string of the method value of this Message.	 * @param callId - the new CallIdHeader object of the callId value of this Message.	 * @param cSeq - the new CSeqHeader object of the cSeq value of this Message.	 * @param from - the new FromHeader object of the from value of this Message.	 * @param to - the new ToHeader object of the to value of this Message.	 * @param content - the new byte array of the body content value of this Message.	 * @param contentType - the new ContentTypeHeader object of the content type 	 * value of this Message.	 * @throws ParseException which signals that an error has been reached	 * unexpectedly while parsing the method or the body.	 */	public PIPRequest createRequest(		URI requestURI,		String method,		CallIdHeader callId,		CSeqHeader cSeq,		FromHeader from,		ToHeader to,		byte[] content,		ContentTypeHeader contentType)		throws ParseException {		if (requestURI == null			|| method == null			|| callId == null			|| cSeq == null			|| from == null			|| to == null			|| content == null			|| contentType == null)			throw new ParseException(				"JAIN-PIP Exception, some parameters are missing"					+ ", unable to create the request",				0);		PIPRequest pipRequest = new PIPRequest();		pipRequest.setRequestURI(requestURI);		pipRequest.setMethod(method);		pipRequest.setCallId(callId);		pipRequest.setCSeq(cSeq);		pipRequest.setFrom(from);		pipRequest.setTo(to);		pipRequest.setHeader((ContentTypeHeader) contentType);		pipRequest.setMessageContent(content);		return pipRequest;	}	/**	 * Creates a new Request message of type specified by the method paramater,	 * containing the URIold of the Request, the mandatory headers of the message.	 * This new Request does not contain a body.	 *	 * @param requestURI - the new URIold object of the requestURI value of this Message.	 * @param method - the new string of the method value of this Message.	 * @param callId - the new CallIdHeader object of the callId value of this Message.	 * @param cSeq - the new CSeqHeader object of the cSeq value of this Message.	 * @param from - the new FromHeader object of the from value of this Message.	 * @param to - the new ToHeader object of the to value of this Message.	 * @throws ParseException which signals that an error has been reached	 * unexpectedly while parsing the method.	 */	public PIPRequest createRequest(		URI requestURI,		String method,		CallIdHeader callId,		CSeqHeader cSeq,		FromHeader from,		ToHeader to)		throws ParseException {		if (requestURI == null			|| method == null			|| callId == null			|| cSeq == null			|| from == null			|| to == null)			throw new ParseException(				"JAIN-PIP Exception, some parameters are missing"					+ ", unable to create the request",				0);		PIPRequest pipRequest = new PIPRequest();		pipRequest.setRequestURI(requestURI);		pipRequest.setMethod(method);		pipRequest.setCallId(callId);		pipRequest.setCSeq(cSeq);		pipRequest.setFrom(from);		pipRequest.setTo(to);		return pipRequest;	}	// Standard Response Creation methods	/**	 * Creates a new Response message of type specified by the statusCode 	 * paramater, containing the mandatory headers of the message with a body 	 * in the form of a Java object and the body content type.	 *	 * @param statusCode - the new integer of the statusCode value of this Message.	 * @param callId - the new CallIdHeader object of the callId value of this Message.	 * @param cSeq - the new CSeqHeader object of the cSeq value of this Message.	 * @param from - the new FromHeader object of the from value of this Message.	 * @param to - the new ToHeader object of the to value of this Message.	 * @param content - the new Object of the body content value of this Message.	 * @param contentType - the new ContentTypeHeader object of the content type 	 * value of this Message.	 * @throws ParseException which signals that an error has been reached	 * unexpectedly while parsing the statusCode or the body.	 */	public PIPResponse createResponse(		int statusCode,		CallIdHeader callId,		CSeqHeader cSeq,		FromHeader from,		ToHeader to,		Object content,		ContentTypeHeader contentType)		throws ParseException {		if (callId == null			|| cSeq == null			|| from == null			|| to == null			|| content == null			|| contentType == null)			throw new NullPointerException(" unable to create the response");		PIPResponse pipResponse = new PIPResponse();		StatusLine statusLine = new StatusLine();		statusLine.setStatusCode(statusCode);		String reasonPhrase = PIPResponse.getReasonPhrase(statusCode);		if (reasonPhrase == null)			throw new ParseException(statusCode + " Unkown  ", 0);		statusLine.setReasonPhrase(reasonPhrase);		pipResponse.setStatusLine(statusLine);		pipResponse.setCallId(callId);		pipResponse.setCSeq(cSeq);		pipResponse.setFrom(from);		pipResponse.setTo(to);		pipResponse.setContent(content, contentType);		return pipResponse;	}	/**	 * Creates a new Response message of type specified by the statusCode 	 * paramater, containing the mandatory headers of the message with a body 	 * in the form of a byte array and the body content type.	 *	 * @param statusCode - the new integer of the statusCode value of this Message.	 * @param callId - the new CallIdHeader object of the callId value of this Message.	 * @param cSeq - the new CSeqHeader object of the cSeq value of this Message.	 * @param from - the new FromHeader object of the from value of this Message.	 * @param to - the new ToHeader object of the to value of this Message.	 * @param content - the new byte array of the body content value of this Message.	 * @param contentType - the new ContentTypeHeader object of the content type 	 * value of this Message.	 * @throws ParseException which signals that an error has been reached	 * unexpectedly while parsing the statusCode or the body.	 */	public PIPResponse createResponse(		int statusCode,		CallIdHeader callId,		CSeqHeader cSeq,		FromHeader from,		ToHeader to,		byte[] content,		ContentTypeHeader contentType)		throws ParseException {		if (callId == null			|| cSeq == null			|| from == null			|| to == null			|| content == null			|| contentType == null)			throw new NullPointerException("Null params ");		PIPResponse pipResponse = new PIPResponse();		pipResponse.setStatusCode(statusCode);		pipResponse.setCallId(callId);		pipResponse.setCSeq(cSeq);		pipResponse.setFrom(from);		pipResponse.setTo(to);		pipResponse.setHeader((ContentTypeHeader) contentType);		pipResponse.setMessageContent(content);		return pipResponse;	}	/**	 * Creates a new Response message of type specified by the statusCode 	 * paramater, containing the mandatory headers of the message. This new 	 * Response does not contain a body.	 *	 * @param statusCode - the new integer of the statusCode value of this Message.	 * @param callId - the new CallIdHeader object of the callId value of this Message.	 * @param cSeq - the new CSeqHeader object of the cSeq value of this Message.	 * @param from - the new FromHeader object of the from value of this Message.	 * @param to - the new ToHeader object of the to value of this Message.	 * @throws ParseException which signals that an error has been reached	 * unexpectedly while parsing the statusCode.	 */	public PIPResponse createResponse(		int statusCode,		CallIdHeader callId,		CSeqHeader cSeq,		FromHeader from,		ToHeader to)		throws ParseException {		if (callId == null			|| cSeq == null			|| from == null			|| to == null)			throw new ParseException(				"JAIN-PIP Exception, some parameters are missing"					+ ", unable to create the response",				0);		PIPResponse pipResponse = new PIPResponse();		pipResponse.setStatusCode(statusCode);		pipResponse.setCallId(callId);		pipResponse.setCSeq(cSeq);		pipResponse.setFrom(from);		pipResponse.setTo(to);		return pipResponse;	}	// Response Creation methods based on a Request    	/**	 * Creates a new Response message of type specified by the statusCode 	 * paramater, based on a specific Request with a new body in the form of a 	 * Java object and the body content type.	 *	 * @param statusCode - the new integer of the statusCode value of this Message.	 * @param request - the received Reqest object upon which to base the Response.	 * @param content - the new Object of the body content value of this Message.	 * @param contentType - the new ContentTypeHeader object of the content type 	 * value of this Message.	 * @throws ParseException which signals that an error has been reached	 * unexpectedly while parsing the statusCode or the body.	 */	public PIPResponse createResponse(		int statusCode,		PIPRequest request,		ContentTypeHeader contentType,		Object content)		throws ParseException {		if (request == null || content == null || contentType == null)			throw new NullPointerException("null parameters");		PIPRequest pipRequest = (PIPRequest) request;		PIPResponse pipResponse = pipRequest.createResponse(statusCode);		pipResponse.setContent(content, contentType);		return pipResponse;	}	/**	 * Creates a new Response message of type specified by the statusCode 	 * paramater, based on a specific Request with a new body in the form of a 	 * byte array and the body content type.	 *	 * @param statusCode - the new integer of the statusCode value of this Message.	 * @param request - the received Reqest object upon which to base the Response.	 * @param content - the new byte array of the body content value of this Message.	 * @param contentType - the new ContentTypeHeader object of the content type 	 * value of this Message.	 * @throws ParseException which signals that an error has been reached	 * unexpectedly while parsing the statusCode or the body.	 */	public PIPResponse createResponse(		int statusCode,		PIPRequest request,		ContentTypeHeader contentType,		byte[] content)		throws ParseException {		if (request == null || content == null || contentType == null)			throw new NullPointerException("null Parameters");		PIPRequest pipRequest = (PIPRequest) request;		PIPResponse pipResponse = pipRequest.createResponse(statusCode);		pipResponse.setHeader((ContentTypeHeader) contentType);		pipResponse.setMessageContent(content);		return pipResponse;	}	/**	 * Creates a new Response message of type specified by the statusCode 	 * paramater, based on a specific Request message. This new Response does 	 * not contain a body.	 *	 * @param statusCode - the new integer of the statusCode value of this Message.	 * @param request - the received Reqest object upon which to base the Response.	 * @throws ParseException which signals that an error has been reached	 * unexpectedly while parsing the statusCode.	 */	public PIPResponse createResponse(int statusCode, PIPRequest request)		throws ParseException {		if (request == null)			throw new NullPointerException("null parameters");		// if (LogWriter.needsLogging)		//	LogWriter.logMessage("createResponse " + request);		PIPRequest pipRequest = (PIPRequest) request;		PIPResponse pipResponse = pipRequest.createResponse(statusCode);		// Remove the content from the message (Bug report from		// Antonis Karydas.		pipResponse.removeContent();		pipResponse.removeHeader(ContentTypeHeader.NAME);		return pipResponse;	}	/** Creates a new Request message of type specified by the method paramater,	 * containing the URIold of the Request, the mandatory headers of the message	 * with a body in the form of a byte array and body content type.	 *	 * @param requestURI - the new URIold object of the requestURI value 	 * 		of this Message.	 * @param method - the new string of the method value of this Message.	 * @param callId - the new CallIdHeader object of the callId value 	 * 		of this Message.	 * @param cSeq - the new CSeqHeader object of the cSeq value of 	 * 		this Message.	 * @param from - the new FromHeader object of the from value of 	 *		this Message.	 * @param to - the new ToHeader object of the to value of this Message.	 * @param contentType - the new ContentTypeHeader object of the content type	 * value of this Message.	 * @param content - the new byte array of the body content 	 * value of this Message.	 * @throws ParseException which signals that an error has been reached	 * unexpectedly while parsing the method or the body.	 */	public PIPRequest createRequest(		URI requestURI,		String method,		CallIdHeader callId,		CSeqHeader cSeq,		FromHeader from,		ToHeader to,		ContentTypeHeader contentType,		byte[] content)		throws ParseException {		if (requestURI == null			|| method == null			|| callId == null			|| cSeq == null			|| from == null			|| to == null			|| content == null			|| contentType == null)			throw new NullPointerException("missing parameters");		PIPRequest pipRequest = new PIPRequest();		pipRequest.setRequestURI(requestURI);		pipRequest.setMethod(method);		pipRequest.setCallId(callId);		pipRequest.setCSeq(cSeq);		pipRequest.setFrom(from);		pipRequest.setTo(to);		pipRequest.setContent(content, contentType);		return pipRequest;	}	/** Creates a new Response message of type specified by the statusCode	 * paramater, containing the mandatory headers of the message with a body	 * in the form of a Java object and the body content type.	 *	 * @param statusCode the new integer of the 	 * 	statusCode value of this Message.	 * @param callId the new CallIdHeader object of the 	 * 		callId value of this Message.	 * @param cSeq the new CSeqHeader object of the cSeq value of this Message.	 * @param from the new FromHeader object of the from value of this Message.	 * @param to the new ToHeader object of the to value of this Message.	 * @param contentType the new ContentTypeHeader object of the content type	 * value of this Message.	 * @param content the new Object of the body content value of this Message.	 * @throws ParseException which signals that an error has been reached	 * unexpectedly while parsing the statusCode or the body.	 */	public PIPResponse createResponse(		int statusCode,		CallIdHeader callId,		CSeqHeader cSeq,		FromHeader from,		ToHeader to,		ContentTypeHeader contentType,		Object content)		throws ParseException {		if (callId == null			|| cSeq == null			|| from == null			|| to == null			|| content == null			|| contentType == null)			throw new NullPointerException("missing parameters");		PIPResponse pipResponse = new PIPResponse();		StatusLine statusLine = new StatusLine();		statusLine.setStatusCode(statusCode);		String reason = PIPResponse.getReasonPhrase(statusCode);		if (reason == null)			throw new ParseException(statusCode + " Unknown", 0);		statusLine.setReasonPhrase(reason);		pipResponse.setStatusLine(statusLine);		pipResponse.setCallId(callId);		pipResponse.setCSeq(cSeq);		pipResponse.setFrom(from);		pipResponse.setTo(to);		pipResponse.setContent(content, contentType);		return pipResponse;	}	/** Creates a new Response message of type specified by the statusCode	 * paramater, containing the mandatory headers of the message with a body	 * in the form of a byte array and the body content type.	 *	 * @param statusCode the new integer of the statusCode value of this Message.	 * @param callId the new CallIdHeader object of the callId value of this Message.	 * @param cSeq the new CSeqHeader object of the cSeq value of this Message.	 * @param from the new FromHeader object of the from value of this Message.	 * @param to the new ToHeader object of the to value of this Message.	 * @param contentType the new ContentTypeHeader object of the content type	 * value of this Message.	 * @param content the new byte array of the body content value of this Message.	 * @throws ParseException which signals that an error has been reached	 * unexpectedly while parsing the statusCode or the body.	 */	public PIPResponse createResponse(		int statusCode,		CallIdHeader callId,		CSeqHeader cSeq,		FromHeader from,		ToHeader to,		ContentTypeHeader contentType,		byte[] content)		throws ParseException {		if (callId == null			|| cSeq == null			|| from == null			|| to == null			|| content == null			|| contentType == null)			throw new NullPointerException("missing parameters");		PIPResponse pipResponse = new PIPResponse();		StatusLine statusLine = new StatusLine();		statusLine.setStatusCode(statusCode);		String reason = PIPResponse.getReasonPhrase(statusCode);		if (reason == null)			throw new ParseException(statusCode + " : Unknown", 0);		statusLine.setReasonPhrase(reason);		pipResponse.setStatusLine(statusLine);		pipResponse.setCallId(callId);		pipResponse.setCSeq(cSeq);		pipResponse.setFrom(from);		pipResponse.setTo(to);		pipResponse.setContent(content, contentType);		return pipResponse;	}	/**	 * Create a request from a string. Conveniance method for UACs	 * that want to create an outgoing request from a string. Only the	 * headers of the request should be included in the String that is	 * supplied to this method.	 *	 * @param requestString -- string from which to create the message	 *		null string returns an empty message.	 */	public PIPRequest createRequest(String requestString)		throws java.text.ParseException {		if (requestString == null)			return new PIPRequest();		StringMsgParser smp = new StringMsgParser();		PIPMessage pipMessage = smp.parsePIPMessage(requestString);		if (!(pipMessage instanceof PIPRequest))			throw new ParseException(requestString, 0);		return (PIPRequest) pipMessage;	}		/** Create a response from a string 	 * 	 * @param responseString -- string from which to create the message	 *		null string returns an empty message. 	 *	 */	public PIPResponse createResponse (String responseString ) 	throws java.text.ParseException {	    if (responseString == null)			return new PIPResponse();		StringMsgParser smp = new StringMsgParser();		PIPMessage pipMessage = smp.parsePIPMessage(responseString);		if (!(pipMessage instanceof PIPResponse))			throw new ParseException(responseString, 0);		return (PIPResponse) pipMessage;	}}