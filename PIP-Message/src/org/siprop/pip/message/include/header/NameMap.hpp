/** Conditions Of Use * * This software was developed by employees of the National Institute of* Standards and Technology (NIST), an agency of the Federal Government.* Pursuant to title 15 Untied States Code Section 105, works of NIST* employees are not subject to copyright protection in the United States* and are considered to be in the public domain.  As a result, a formal* license is not needed to use the software.* * This software is provided by NIST as a service and is expressly* provided "AS IS."  NIST MAKES NO WARRANTY OF ANY KIND, EXPRESS, IMPLIED* OR STATUTORY, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTY OF* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT* AND DATA ACCURACY.  NIST does not warrant or make any representations* regarding the use of the software or the results thereof, including but* not limited to the correctness, accuracy, reliability or usefulness of* the software.* * Permission to use this software is contingent upon your acceptance* of the terms of this agreement*  * .* */package org.siprop.pip.message.header;//import gov.nist.javax.pip.header.ims.*;import java.util.Hashtable;/** * A mapping class that returns the PIPHeader for a given header name. * Add new classes to this map if you are implementing new header types if * you want some of the introspection based methods to work. * @version 1.2 $Revision: 1.9 $ $Date: 2007/01/08 19:24:57 $ * @since 1.1 */public class NameMap implements PIPHeaderNames {	static Hashtable nameMap;	static {		initializeNameMap();	}	protected static void putNameMap(String headerName, String className) {		nameMap.put(			headerName.toLowerCase(),			className);	}	public static Class getClassFromName(String headerName) {		String className = (String) nameMap.get(headerName.toLowerCase());		if (className == null)			return null;		else {			try {				return Class.forName(className);			} catch (ClassNotFoundException ex) {				return null;			}		}	}	/** add an extension header to this map.	*@param headerName is the extension header name.	*@param className is the fully qualified class name that implements	* the header (does not have to belong to the nist-sip package).	* Use this if you want to use the introspection-based methods.	*/	public static void addExtensionHeader(		String headerName,		String className) {		nameMap.put(headerName.toLowerCase(), className);	}	private static void initializeNameMap() {		nameMap = new Hashtable();		putNameMap(AllowHeader.NAME, AllowHeader.class.getName()); // 5		putNameMap(CSEQ, CSeqHeader.class.getName()); //8		putNameMap(TO, ToHeader.class.getName()); //15		putNameMap(FROM, FromHeader.class.getName()); //17		putNameMap(CALL_ID, CallIdHeader.class.getName()); //18		putNameMap(CONTENT_TYPE, ContentTypeHeader.class.getName()); //24		putNameMap(CONTENT_LENGTH, ContentLengthHeader.class.getName()); //26		putNameMap(CONTACT, ContactHeader.class.getName()); //28	}}