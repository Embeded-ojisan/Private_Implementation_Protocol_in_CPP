/** Conditions Of Use * * This software was developed by employees of the National Institute of* Standards and Technology (NIST), an agency of the Federal Government.* Pursuant to title 15 Untied States Code Section 105, works of NIST* employees are not subject to copyright protection in the United States* and are considered to be in the public domain.  As a result, a formal* license is not needed to use the software.* * This software is provided by NIST as a service and is expressly* provided "AS IS."  NIST MAKES NO WARRANTY OF ANY KIND, EXPRESS, IMPLIED* OR STATUTORY, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTY OF* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT* AND DATA ACCURACY.  NIST does not warrant or make any representations* regarding the use of the software or the results thereof, including but* not limited to the correctness, accuracy, reliability or usefulness of* the software.* * Permission to use this software is contingent upon your acceptance* of the terms of this agreement*  * .* *//******************************************************************************* * Product of NIST/ITL Advanced Networking Technologies Division (ANTD)         * *******************************************************************************/package org.siprop.pip.message.util;//import gov.nist.javax.pip.header.ims.*;import java.util.Hashtable;import org.siprop.pip.message.header.ContactHeader;import org.siprop.pip.message.header.ContactList;import org.siprop.pip.message.header.ExtensionHeader;import org.siprop.pip.message.header.ExtensionHeaderList;import org.siprop.pip.message.header.PIPHeader;import org.siprop.pip.message.header.PIPHeaderList;/** * A map of which of the standard headers may appear as a list *  * @version 1.2 $Revision: 1.10 $ $Date: 2007/01/08 19:24:56 $ * @since 1.1 */public class ListMap {	// A table that indicates whether a header has a list representation or	// not (to catch adding of the non-list form when a list exists.)	// Entries in this table allow you to look up the list form of a header	// (provided it has a list form). Note that under JAVA-5 we have	// typed collections which would render such a list obsolete. However,	// we are not using java 5.	private static Hashtable headerListTable;	private static boolean initialized;	static {		initializeListMap();	}	static private void initializeListMap() {		/*		 * Build a table mapping between objects that have a list form and the		 * class of such objects.		 */		headerListTable = new Hashtable();		headerListTable.put(ExtensionHeader.class, ExtensionHeaderList.class);		headerListTable.put(ContactHeader.class, ContactList.class);	    initialized = true;	}	/**	 * return true if this has an associated list object.	 */	public static boolean hasList(PIPHeader pipHeader) {		if (pipHeader instanceof PIPHeaderList)			return false;		else {			Class headerClass = pipHeader.getClass();			return headerListTable.get(headerClass) != null;		}	}	/**	 * Return true if this has an associated list object.	 */	static protected boolean hasList(Class pipHdrClass) {		if (!initialized)			initializeListMap();		return headerListTable.get(pipHdrClass) != null;	}	/**	 * Get the associated list class.	 */	static protected Class getListClass(Class pipHdrClass) {		if (!initialized)			initializeListMap();		return (Class) headerListTable.get(pipHdrClass);	}	/**	 * Return a list object for this header if it has an associated list object.	 */	public static PIPHeaderList getList(PIPHeader pipHeader) {		if (!initialized)			initializeListMap();		try {			Class headerClass = pipHeader.getClass();			Class listClass = (Class) headerListTable.get(headerClass);			PIPHeaderList shl = (PIPHeaderList) listClass.newInstance();			shl.setHeaderName(pipHeader.getName());			return shl;		} catch (InstantiationException ex) {			ex.printStackTrace();		} catch (IllegalAccessException ex) {			ex.printStackTrace();		}		return null;	}}